#+TITLE: My GNU Emacs configuration
#+DESCRIPTION: Loading emacs configuration using org-babel
#+TAGS: emacs
#+STARTUP: overview
#+CATEGORIES: editing

* user info
#+BEGIN_SRC emacs-lisp

  (setq user-full-name "niko")
  (setq user-mail-address "niko@local")

#+END_SRC

* my config
#+BEGIN_SRC emacs-lisp
     ;transparency
     ; (setq my-transparency 85) ; figrue out how to use variable
     ;(set-frame-parameter (selected-frame) 'alpha '(90 . 50)) ; first number is focused window transprency, second one is for non-focused
     ;(add-to-list 'default-frame-alist '(alpha . (90 . 50)))

     ;(set-frame-parameter (selected-frame) 'alpha '(95 . 80)) ; first number is focused window transprency, second one is for non-focused
     ;(add-to-list 'default-frame-alist '(alpha . (95 . 80)))

     (setq inhibit-x-resources 1)
     ; Allow 20MB of memory (instead of 0.76MB) before calling garbage collection. This means GC runs less often, which speeds up some operations.
     (setq gc-cons-threshold 20000000)

     ; set the default mode for scratch buffer to text-mode. Default is elisp
     ;(setq initial-major-mode 'text-mode)

     (set-keyboard-coding-system nil)

     ; use M-x toggle-frame-fullscreen
     (setq ns-use-native-fullscreen nil)

     (setq frame-resize-pixelwise 1)


     (setq scroll-conservatively 101)

     ; open files in same emacs frame
     (setq ns-pop-up-frames nil)

     ; disable beeping, enable visible bell
     (setq visible-bell nil)
     (setq ring-bell-function 'ignore)

     ; https://www.emacswiki.org/emacs/HorizontalSplitting
     ; open help etc in horizontal(vim horizontal) split
     ;;(setq split-width-threshold 9999)

     ; open help etc in horizontal(vim vertical) split
     ; (setq split-width-threshold 0)

     ; set fn key to hyper
     ; http://ergoemacs.org/emacs/emacs_hyper_super_keys.html
     (setq ns-function-modifier 'hyper)
     ; (global-set-key (kbd "H-f") 'toggle-frame-fullsceen)

     ; NOTES
     ; global-set-key expects an interactive command. (lambda () (interactive) (forward-line 5)) ought to work.
     ; By the way, C-h f commandp is a pretty good starting point for errors like that.
     ; H-f - Hyper + f. Fn key on apple keyboard is set to Hyper key from Karabiner


    (defun config-reload ()
      (interactive)
      (org-babel-load-file (expand-file-name "loader.org" init-dir)))




    (global-set-key (kbd "C-c r") 'config-reload)


     (global-set-key (kbd "H-f") #'toggle-frame-fullscreen)
     (global-set-key (kbd "<C-M-return>") #'toggle-frame-fullscreen)
     ;; Command + f

     ;(global-set-key (kbd "s-f") 'counsel-file-jump)
     ;(global-set-key (kbd "s-f") 'helm-occur)
     ;;(global-set-key (kbd "s-F") 'helm-rg)
     ;;(global-set-key (kbd "s-F") 'counsel-rg)

     ;(global-set-key (kbd "s-f") (lambda () (interactive)
     ;                                (toggle-frame-fullscreen)))

     ; disable transient-mark-mode
     ; (setq transient-mark-mode nil)

     ; answer yes or no questions with just y and p
     (defalias 'yes-or-no-p 'y-or-n-p)

     ; enable/disable blinking cursor
     (blink-cursor-mode 0)

     ; make cursor in non active windows be a horizontal bar instead of the default hollow cursor
     ;(setq cursor-in-non-selected-windows (quote (hbar . 0)))

     ; vertical bar caret
     ; (setq-default cursor-type 'bar)

     ; use spaces for tabs
     (setq-default indent-tabs-mode nil)
     (setq tab-width 4)

     ; line spacing. Default is 0. Set to 4 for mononoki line height linespace
     ;(setq-default line-spacing nil)
     ;(setq-default line-height 2)

     ; show column number
     (setq column-number-mode 1)

     ; highlight current line
     (global-hl-line-mode 1)

     ; set default session for tramp
     (setq tramp-defaul-session "ssh")

     ; toggle line wrapping
     (global-set-key (kbd "<f6>") 'toggle-truncate-lines)

     ; start a shell
     (global-set-key (kbd "<f5>") 'eshell)
     ;;(global-set-key (kbd "<f5>") 'term)
     ;;(setq explicit-shell-file-name "/usr/local/bin/zsh")
     (setq explicit-shell-file-name "/bin/zsh")

     (global-unset-key (kbd "s-,"))
     (global-set-key (kbd "s-,") (lambda() (interactive)(find-file "~/.emacs.d/loader.org")))
     (global-set-key (kbd "s-\\") (lambda() (interactive)(find-file "~/.emacs.d/loader.org")))
     (global-set-key (kbd "<f12>") (lambda() (interactive)(find-file "~/org/todo.org")))

     ; make cmd-left and right move to beginning and end of line
     (global-set-key (kbd "s-<right>") 'move-end-of-line)
     (global-set-key (kbd "s-<left>") 'move-beginning-of-line)

     ; since M-< and > are tricky
     (global-set-key (kbd "s-<") 'beginning-of-buffer)
     (global-set-key (kbd "s->") 'end-of-buffer)

     ; commenting
     (global-set-key (kbd "s-/") 'comment-dwim)

     ; kill buffer with cmd-w
     (global-set-key (kbd "s-w") 'kill-this-buffer)

     ; disable CMD-q for quitting by accident
     (global-unset-key (kbd "s-q"))

     ; hide emacs instead of quit
     (global-set-key (kbd "s-q") 'ns-do-hide-emacs)

     ;; enable CMD-OPT-h to hide other apps like in other apps
     (global-set-key (kbd "M-s-Ë™") 'ns-do-hide-others)

     (global-unset-key (kbd "C-w"))
     (global-set-key (kbd "C-w k") 'kill-region)
     (global-set-key (kbd "C-w c") 'kill-ring-save)

     ; toggle full screen
     ; (global-unset-key (kbd "<f10>"))
     ; (global-set-key (kbd "<f10>") 'toggle-frame-fullscreen)
     ;(global-set-key (kbd "C-s-f") 'toggle-frame-fullscreen)

     (global-unset-key (kbd "s-o"))
     (global-set-key (kbd "s-o") 'other-window)

     (global-unset-key (kbd "s-;"))
     (global-set-key (kbd "s-; t") 'helm-tramp)

     (global-set-key (kbd "s-1") 'delete-other-windows)
     (global-set-key (kbd "s-2") 'split-window-below)
     (global-set-key (kbd "s-3") 'split-window-right)

     (global-unset-key (kbd "s-d"))
     (global-set-key (kbd "s-d") 'delete-window)

     (global-set-key (kbd "C-x k") 'kill-current-buffer)

     (global-unset-key (kbd "s-k"))
     (global-unset-key (kbd "s-j"))
    ;(global-set-key (kbd "s-k") 'next-buffer)
    ;(global-set-key (kbd "s-j") 'previous-buffer)

     (global-set-key (kbd "s-]") 'next-buffer)
     (global-set-key (kbd "s-[") 'previous-buffer)

     (add-hook 'visual-line-mode-hook (lambda () (diminish 'visual-line-mode)))


    (global-unset-key (kbd "s-n"))


    (defun compile-and-run-java ()
    "Compile and run the current Java file in a separate buffer."
    (interactive)
    (let ((file-name (buffer-file-name)))
      (if (and file-name (string-suffix-p ".java" file-name))
          (let* ((class-name (file-name-sans-extension (file-name-nondirectory file-name)))
                 ;;(command (format "javac %s && java %s" file-name class-name))
                 (command (format "/Users/niko/.local/share/mise/installs/java/latest/bin/javac %s && /Users/niko/.local/share/mise/installs/java/latest/bin/java %s" file-name class-name))
                 (compilation-buffer-name-function (lambda (_) "*Java Compilation*")))
            (compile command)
            (add-hook 'compilation-filter-hook
                      (lambda ()
                        (when (string-match "Finished" (buffer-string))
                          (goto-char (point-max)))))
            (setq compilation-finish-functions
                  (append compilation-finish-functions
                          (list (lambda (buf str)
                                  (when (string-match "Finished" str)
                                    (pop-to-buffer buf)
                                    (end-of-buffer)))))))
        (message "Not a Java file!"))))

    (global-set-key (kbd "C-'") 'compile-and-run-java)


#+END_SRC


#+BEGIN_SRC emacs-lisp
  (require 'package)
#+END_SRC

Because the default setting for package-archives is to use the HTTP access to the GNU archive, I set the variable to `nil` before adding the HTTPS variants.

#+name: credmp-package-infrastructure
#+begin_src emacs-lisp

    (defvar gnu '("gnu" . "https://elpa.gnu.org/packages/"))
    (defvar melpa '("melpa" . "https://melpa.org/packages/"))
  ;;  (defvar melpa-stable '("melpa-stable" . "https://stable.melpa.org/packages/"))
    ;;(defvar org '("org" . "http://orgmode.org/elpa/"))

    ;; Add marmalade to package repos
    (setq package-archives nil)
    ;;(add-to-list 'package-archives org t)
    ;;(add-to-list 'package-archives melpa-stable t)
    (add-to-list 'package-archives melpa t)
    (add-to-list 'package-archives gnu t)

#+end_src

* backup files
#+BEGIN_SRC emacs-lisp

  (setq
     backup-by-copying t      ; don't clobber symlinks
     backup-directory-alist
      '(("." . "~/.emacs.d/backup"))    ; don't litter my fs tree
     delete-old-versions t
     kept-new-versions 6
     kept-old-versions 2
     version-control t)       ; use versioned backups

#+END_SRC

* window dimensions and decorations

https://www.reddit.com/r/emacs/comments/b2r2oj/is_it_possible_to_disable_or_hide_the_titlebar_in/

#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(width . 140))
  (add-to-list 'default-frame-alist '(height . 48))
  ;;(add-to-list 'default-frame-alist '(width . 400))
  ;;(add-to-list 'default-frame-alist '(height . 48))

  ;;(add-to-list 'default-frame-alist '(width . (text-pixels . 2560)))
  ;;(add-to-list 'default-frame-alist '(height . (text-pixels . 1436)))
  ;;(add-to-list 'default-frame-alist '(top . 0))
  ;;(add-to-list 'default-frame-alist '(left . 0))

  ;;(add-to-list 'default-frame-alist '(undecorated . t))
  ;;(add-to-list 'default-frame-alist '(undecorated-round . t)) 
  ;;(add-to-list 'default-frame-alist '(drag-internal-border . 1))
  ;;(add-to-list 'default-frame-alist '(internal-border-width . 5))
  ;;(add-to-list 'default-frame-alist '(fullscreen . maximized))

#+END_SRC

* title bar color matching theme
#+BEGIN_SRC emacs-lisp

  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark))
  ;; remove file icon from title bar
  (setq ns-use-proxy-icon nil)

#+END_SRC

* reload config
#+BEGIN_SRC emacs-lisp

  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "loader.org" init-dir)))
  (global-set-key (kbd "C-c r") 'config-reload)

#+END_SRC

* run this line

#+begin_src emacs-lisp

  (defun run-this-line ()
    "Go to end of line and evaluate expression."
    (interactive)
    (move-end-of-line 1)
    (eval-last-sexp nil)
  )
  
  (global-set-key (kbd "s-g") 'run-this-line)

#+end_src

* my functions
#+begin_src emacs-lisp
  (defun my/search-for-org-files ()
    (interactive)
    (counsel-fzf nil "~/org/" "find org file: ")
  )

  (defun my/search-in-org-files ()
    (interactive)
    (counsel-rg nil "~/org" nil "search in org files: ")
  )
#+end_src
* install use-package

https://github.com/jwiegley/use-package

https://ianyepan.github.io/posts/setting-up-use-package/#:~:text=Setting%20use-package-always-,the%20missing%20ones%20for%20you.

#+BEGIN_SRC emacs-lisp

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  ;;(require 'use-package)

  (eval-when-compile
    (require 'use-package))

#+END_SRC

* diminish mode
#+BEGIN_SRC emacs-lisp

  (use-package diminish
    :ensure t
    :config
    (diminish 'eldoc-mode))

#+END_SRC

* exec path from shell

#+begin_src emacs-lisp

  (use-package exec-path-from-shell
    :ensure t
    :config
    (exec-path-from-shell-initialize))

#+end_src

#+RESULTS:

* themes

** theme tweaks
#+begin_src emacs-lisp

  (defun my/set-theme-tweaks ()
    (interactive)

   (set-face-attribute 'cursor nil :background "#FF5289")
;   (set-face-attribute 'region nil :background "#41AE7A" :foreground "black")
;   (set-face-attribute 'vertical-border nil :foreground "dark gray" :background "dark gray")

    ;; make background the same as fringe color for default theme
;;    (set-face-attribute 'default nil :background "grey95")

    ;; for default white theme
    ;;(set-face-attribute 'org-block nil :background "gray90")

    ;; for dark theme
    ;;(set-face-attribute 'org-block nil :background "gray10")

    )

#+end_src

** built in theme
#+begin_src emacs-lisp

  (setq custom-safe-themes t)
  ;;(load-theme 'dichromacy t)
  ;;(load-theme 'modus-operandi-tinted t)
  ;;(load-theme 'modus-vivendi-tinted t)
  ; (load-theme 'leuven-dark t)
   ;(set-face-attribute 'cursor nil :background "IndianRed3")
  (my/set-theme-tweaks) 
  ; (set-face-attribute 'default nil :background "#0d1117" :foreground "grey70")
  ; (set-face-attribute 'fringe nil :background "#0d1117")
    ;(set-face-attribute 'mode-line nil :background "#333843" :foreground "grey70")
    ;;(set-face-attribute 'mode-line nil :background "dark gray")
  ; (my/set-default-mode-line)

#+end_src

** mode line
#+begin_src emacs-lisp

  (defun my/set-default-mode-line ()
    (interactive)
    ;;(setq my-mode-line-color-bg "#19262D")
    ;(setq my-mode-line-color-bg "#261111")
    ;(set-face-attribute 'mode-line nil :background my-mode-line-color-bg :foreground "#a09f93" :box '(:line-width -1 :style released-button))

    ;; same as no theme defaults
    ;(set-face-attribute 'mode-line nil :background "grey75" :foreground "black" :box '(:line-width -1 :style released-button))

    ;; just make it 3d
    ;;(set-face-attribute 'mode-line nil :box '(:line-width -1 :style released-button))

    ;(set-face-attribute 'mode-line nil :background "#4A5161" :foreground "grey80" :box '(:line-width -1 :style released-button))
    ;(set-face-attribute 'mode-line nil :background "#333843" :foreground "grey80" :box '(:line-width -1 :style released-button))

    ;; this one is the 3d version colored
    ;;(set-face-attribute 'mode-line nil :background "#333843" :foreground "grey70" :box '(:line-width -1 :style released-button))

    ;; using these for ayu etc
    (set-face-attribute 'mode-line nil :background "#333843" :foreground "grey70" :box nil)
    (set-face-attribute 'mode-line-inactive nil :background "grey17" :foreground "grey70" :box nil)

    ;; fot ujelly
    ;(set-face-attribute 'mode-line nil :background "#454B5B" :foreground "grey70")
    ;(set-face-attribute 'mode-line-inactive nil :background "grey17" :foreground "grey70" :box nil)

    ;; oceanic next
    ;(set-face-attribute 'mode-line nil :background "#084366")
    ;;(set-face-attribute 'mode-line nil :background "#294251")
    ;;(set-face-attribute 'mode-line nil :background "#355467")
    ;;(set-face-attribute 'mode-line-inactive nil :background "PaleVioletRed4" :foreground "grey70" :box nil)


    ;;(set-face-attribute 'mode-line-inactive nil :foreground "gray30" :background "black")

    )

#+end_src

** ujelly themes
#+begin_src emacs-lisp

; (use-package ujelly-theme
;   :ensure t
;   :config
;   (setq custom-safe-themes t)
;   (load-theme 'ujelly t)
;   (set-face-attribute 'cursor nil :background "IndianRed3")
;   (set-face-attribute 'default nil :background "#0d1117" :foreground "grey70")
;   (set-face-attribute 'fringe nil :background "#0d1117")
;                                         ;(set-face-attribute 'mode-line nil :background "#333843" :foreground "grey70")
;   ;;(set-face-attribute 'mode-line nil :background "dark gray")
;   (my/set-default-mode-line)
;   )

#+end_src

** chocolate
#+begin_src emacs-lisp

;;(use-package chocolate-theme
;;  :ensure t
;;  :config
;;  (load-theme 'chocolate t)
;;  (my/set-default-mode-line)
;;  (my/set-theme-tweaks)
;;  ;;(set-face-attribute 'org-block nil :background "#4B393E")
;;  )

#+end_src

** doom themes
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    ;;(load-theme 'doom-ayu-dark t)
    ;; TODO: check if this needs to be wrapped or add it to :init
  (setq custom-safe-themes t)
    ;(load-theme 'doom-spacegrey t)
    ;(load-theme 'doom-gruvbox t)
  (load-theme 'doom-ayu-dark t)
  ;;(set-face-attribute 'widget-field nil :background "gray17")
    ;(load-theme 'doom-ayu-mirage t)
    ;(load-theme 'doom-horizon t)
    ;(load-theme 'doom-one t)
    ;(load-theme 'doom-one-light t)
    ;(load-theme 'doom-vibrant t)
    ;(load-theme 'doom-molokai t)
    ;(load-theme 'doom-Iosvkem t)
    ;(load-theme 'doom-oceanic-next t)
    ;(load-theme 'doom-monokai-pro t)
    ;;(load-theme 'doom-dracula t)
    ;;(load-theme 'doom-miramare t)
    ;(my/set-org-faces)
    (doom-themes-org-config)
    (doom-themes-visual-bell-config)
    ;(set-face-attribute 'doom-visual-bell nil :background "#ff665c" :foreground "black")

    (set-face-attribute 'vertical-border nil :foreground "dark gray" :background "dark gray")

    (my/set-default-mode-line)

    ;(set-face-attribute 'cursor nil :background "IndianRed3")
    )
#+end_src

* rainbow mode

Displays colors

#+begin_src emacs-lisp

  (use-package rainbow-mode
    :ensure t)

#+end_src

* which key
#+BEGIN_SRC emacs-lisp

  (use-package which-key
    :ensure t
    :diminish which-key-mode
    :config
    (which-key-mode 1)
    ;(which-key-setup-side-window-right)
  )

#+END_SRC

* ido mode
#+begin_src emacs-lisp

; (use-package ido
;   :ensure ido-vertical-mode
;   ;; ido-completion-map
;   :bind (:map ido-common-completion-map
;               ("s-j" . ido-next-match)
;               ("s-k" . ido-prev-match))
;   :config
;   (progn
;     (setq ido-enable-flex-matching t)
;     (ido-vertical-mode 1)
;     ;;(setq ido-vertical-define-keys 'C-n-and-C-p-only)
;     (setq ido-vertical-define-keys 'C-n-C-p-up-and-down)
;                                         ;(setq ido-vertical-show-count t)
;     (ido-mode 1)
;     ))

; (use-package flx-ido
;   :ensure t
;   :config
;   (progn
;     (flx-ido-mode 1)
;     (setq ido-use-faces nil)
;     ))
#+end_src

* redo (undo-tree)
#+BEGIN_SRC emacs-lisp

    ;; redo
  ; (use-package undo-tree
  ;   :ensure t
  ;   :diminish undo-tree-mode
  ;   :config
  ;   (progn
  ;     (global-set-key (kbd "s-Z") 'undo-tree-redo)
  ;     (global-undo-tree-mode 1)
  ;     ))


    (use-package undo-tree
    :ensure t
    :after evil
    :diminish
    :init
    (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
    
   (defun my/save-buffer-and-switch-to-normal-state ()
     "Switch to normal state and save the buffer."
     (interactive)
     (when (and (bound-and-true-p evil-mode)
                (not (evil-normal-state-p)))
       (evil-normal-state))
     (save-buffer))
 
   (define-key evil-insert-state-map (kbd "s-s") 'my/save-buffer-and-switch-to-normal-state)

    :config
    (evil-set-undo-system 'undo-tree)
    (global-undo-tree-mode 1))

#+END_SRC
* evil leader
#+begin_src emacs-lisp

  (use-package evil-leader
    :ensure t
    :config
    (global-evil-leader-mode 1)
    ;;(evil-leader/set-leader "<SPC>")
    (evil-leader/set-leader ",")
    (evil-leader/set-key

      "l" 'evil-search-highlight-persist-remove-all
      "," 'org-cycle
      "." 'rainbow-mode
      "c" 'org-ctrl-c-ctrl-c
      "fs" 'counsel-buffer-or-recentf
      "ff" 'find-file
      "fz" 'counsel-fzf
      "fb" 'counsel-to-buffer
      "x" 'counsel-M-x
      "g" 'run-this-line
      ;; "s" 'save-buffer
      ;;"sa" 'helm-org-agenda-files-headings
      ;;"ss" 'helm-org-in-buffer-headings
      "ss" 'counsel-org-goto
      "si" 'counsel-org-goto
      "so" 'my/search-for-org-files
      "sr" 'my/search-in-org-files
      ;; "ss" 'counsel-org-goto
      "t" 'org-todo
      ;;"<tab>" 'org-cycle
      ;; "q" 'ns-do-hide-emacs
      "q" 'kill-current-buffer
      ;; "e" 'deer
      )
    )

#+end_src
* evil mode

#+begin_src emacs-lisp

    (use-package evil
      :ensure t
      :after evil-leader
  ;    :init (setq evil-want-C-i-jump nil)
      :config
      (evil-mode 1)
      ;; (setq evil-undo-system 'undo-tree)
      ;;(setq evil-undo-system 'undo-redo)
      (setq evil-insert-state-cursor '(bar . 2))
      :bind (
             :map evil-normal-state-map
             ("SPC" . evil-ex)
             :map evil-motion-state-map
             ("SPC" . evil-ex)
             ;; ("C-l" . evil-window-right)
             ;; ("C-j" . evil-window-down)
             ;; ("C-k" . evil-window-up)
             )
      )

    ;; enable % to jump to matching <div> tags etc
    (use-package evil-matchit
      :ensure t
      :config
      (global-evil-matchit-mode 1)
      )

                                            ; (use-package evil-magit
                                            ;   :ensure t)

      (use-package evil-surround
        :ensure t
        :config
        (global-evil-surround-mode 1))

    (use-package evil-search-highlight-persist
      :ensure t
      :config
      (global-evil-search-highlight-persist t)
      ;(set-face-attribute 'evil-search-highlight-persist-highlight-face nil :background "yellow1" :foreground "black")
      ;;(set-face-attribute 'evil-search-highlight-persist-highlight-face nil :background "#705B5F" :foreground "#EAEAFE")
      ;;(set-face-attribute 'evil-search-highlight-persist-highlight-face nil :inherit 'lazy-highlight)
      )

    ;; disable cmd-p cuz if crashes emacs
    (global-set-key (kbd "s-p") nil)
    (global-set-key (kbd "s-p") 'evil-mode)
    (global-set-key (kbd "s-.") 'evil-mode)

#+end_src

* org mode
#+BEGIN_SRC emacs-lisp

    (use-package org
      :mode (("\\.org$" . org-mode))
      :ensure t
      :bind (:map org-mode-map
                  ("<tab>" . org-cycle))
      :config
      (progn

        (setq org-image-actual-width nil)

        ;; (setq org-agenda-files '("~/org"))

        ;; diminish org-indent-mode after load of org-indent - both ways work
        ;;(eval-after-load 'org-indent '(diminish 'org-indent-mode))
        ;;(add-hook 'org-indent-mode-hook (lambda () (diminish 'org-indent-mode)))

        (add-hook 'org-timer-done-hook (lambda () (ns-do-applescript "display notification \"Timer Done\"")))

        ;; disabled this one since it messed up with sql tables
        ;;(add-hook 'org-mode-hook (lambda () (visual-line-mode 1)))


        (setq org-startup-folded t)

        (add-hook 'org-mode-hook (lambda () (org-indent-mode 1)))

        ;; insert emacs-lisp source code block by typing <el and then hit TAB
        (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
        (add-to-list 'org-structure-template-alist '("j" . "src java"))
        (add-to-list 'org-structure-template-alist '("js" . "src js"))

        ;; used for inserting templates with <el, <s etc.
        (require 'org-tempo)

        (setq org-confirm-babel-evaluate nil)
        (setq org-src-fontify-natively t)
        (setq org-src-tab-acts-natively t)
        (setq org-log-done t)

        (setq org-file-apps
              '((auto-mode . emacs)
                ("\\.mm\\'" . default)
                ("\\.x?html?\\'" . default)
                ("\\.pdf\\'" . default)
                ("\\.jpg\\'" . "open %s")))
        ;; open sourde edit in same window instead of split (C-c ')
        ;; (setq org-src-window-setup 'current-widow)

        (setq org-todo-keyword-faces
              '(;;("TODO" . org-warning)
                ("ON_IT" . (:foreground "DeepSkyBlue1" :weight bold))
                ("READY_FOR_RELEASE" . (:foreground "VioletRed2" :weight bold))
                ("WAIT" . (:foreground "red1" :weight bold))
                ("READY_FOR_MERGE" . (:foreground "LightGreen" :weight bold))
                ("NEEDS_INPUT" . (:foreground "SeaGreen1" :weight bold))
                ))

        (setq org-bullets-bullet-list '("â‘ " "â‘¡" "â‘¢" "â‘£" "â‘¤" "â‘¥"))

        ))

    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

    (global-set-key "\C-cl" 'org-store-link)
    (global-set-key "\C-cc" 'org-capture)
    (global-set-key "\C-ca" 'org-agenda)
    (global-set-key "\C-cb" 'org-iswitchb)


    (use-package ob-kotlin
      :ensure t)


    (use-package ob-restclient
      :ensure t
      :after 'org
      :init
      ;; this is added here so org mode doesn't complain it can't find ob-restclient
      )


    (use-package ob-async
      :ensure t)

    (org-babel-do-load-languages 'org-babel-load-languages
                                 '((shell        . t)
                                   (js           . t)
                                   (java         . t)
                                   (kotlin       . t)
                                   (sql          . t)
                                   (emacs-lisp   . t)
                                   (python       . t)
                                   (ruby         . t)
                                   (restclient   . t)
                                   (dot          . t)
                                   (css          . t)))


  
; (nconc org-babel-default-header-args:java
;        '((:dir . nil)
;          (:results . value)))


    ;;(use-package ob-typescript
    ;;  :ensure t)

    ;; use this for using non-monospace font outside of source blocks
    ;;(use-package mixed-pitch
    ;;  :ensure t
    ;;  :hook
    ;;  (org-mode . mixed-pitch-mode))

#+END_SRC

* org roam
#+begin_src emacs-lisp

  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory "~/org/org-roam")
    (org-roam-capture-templates
     '(("d" "default" plain "%?" :target
        (file+head "${slug}.org" "#+title: ${title}
      ")
        :unnarrowed t)))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n s" . my/search-in-org-files)
           ("C-c n F" . my/search-for-org-files)
           :map org-mode-map
           ("C-M-i" . completion-at-point))
    :config
    (org-roam-setup))

#+end_src
* TODO org modern

https://github.com/minad/org-modern

* org download

This enables drag and drop of images in org mode files.

#+begin_src emacs-lisp

  (use-package org-download
    :ensure t
    :init
    (setq org-download-image-dir "~/Pictures/org-images"))

#+end_src
* helm
#+begin_src emacs-lisp

;;;;          (use-package helm
;;;;            :ensure t
;;;;            :diminish helm-mode
;;;;            :config
;;;;            (progn
;;;;              ;(require 'helm-config)
;;;;              (helm-mode 1)
;;;;              ;; uncomment to use ido for find file
;;;;              ;;(define-key global-map [remap find-file] 'my/find-files)
;;;;
;;;;              ;(define-key global-map [remap find-file] 'ido-find-file)
;;;;              ;(define-key global-map [remap find-file] 'helm-find-files)
;;;;        ;     ;(define-key global-map [remap occur] 'helm-occur)
;;;;        ;     (define-key global-map [remap list-buffers] 'helm-buffers-list)
;;;;        ;     ;(define-key global-map [remap dabbrev-expand] 'helm-dabbrev)
;;;;              (global-set-key (kbd "M-x") 'helm-M-x)
;;;;        ;     (unless (boundp 'completion-in-region-function)
;;;;        ;       (define-key lisp-interaction-mode-map [remap completion-at-point] 'helm-lisp-completion-at-point)
;;;;        ;       (define-key emacs-lisp-mode-map       [remap completion-at-point] 'helm-lisp-completion-at-point))
;;;;        ;     (setq helm-mode-fuzzy-match t)
;;;;        ;     (setq helm-completion-in-region-fuzzy-match t)
;;;;        ;     (setq helm-recentf-fuzzy-match t)
;;;;        ;     (setq helm-buffers-fuzzy-matching t)
;;;;        ;     (setq helm-recentf-fuzzy-match t)
;;;;        ;     ;;xx helm-find-files: fuzzy matching enabled by default.
;;;;        ;     (setq helm-locate-fuzzy-match t)
;;;;        ;     (setq helm-M-x-fuzzy-match t)
;;;;        ;     (setq helm-semantic-fuzzy-match t)
;;;;        ;     (setq helm-imenu-fuzzy-match t)
;;;;        ;     (setq helm-apropos-fuzzy-match t)
;;;;        ;     (setq helm-lisp-fuzzy-completion t)
;;;;        ;     ;; show recent files
;;;;              (global-set-key (kbd "s-e") 'helm-mini)
;;;;              (global-set-key (kbd "M-s s") 'helm-org-in-buffer-headings)
;;;;
;;;;              (define-key helm-map (kbd "s-k") #'helm-previous-line)
;;;;              (define-key helm-map (kbd "s-j") #'helm-next-line)
;;;;              (define-key helm-buffer-map (kbd "s-d") #'helm-buffer-run-kill-buffers)
;;;;              (define-key helm-buffer-map (kbd "C-j") #'helm-next-line)
;;;;              (define-key helm-buffer-map (kbd "C-k") #'helm-previous-line)
;;;;              (define-key helm-generic-files-map (kbd "C-j") #'helm-next-line)
;;;;              (define-key helm-generic-files-map (kbd "C-k") #'helm-previous-line)
;;;;
;;;;              ; always open helm in bottom split
;;;;              (add-to-list 'display-buffer-alist
;;;;                                  `(,(rx bos "*helm" (* not-newline) "*" eos)
;;;;                                      (display-buffer-in-side-window)
;;;;                                      (inhibit-same-window . t)
;;;;                                      (window-height . 0.4)))
;;;;              ))
;;;;        (use-package helm-tramp
;;;;          :ensure t)
;;;;
;;;;        (use-package helm-org
;;;;          :ensure t)
;;;;
;;;;        (use-package helm-rg
;;;;          :ensure t)
      ; (use-package helm-sql-connect
      ;   :ensure t)

      ; (use-package helm-aws
      ;   :ensure t)

      ; (use-package ejc-sql
      ;   :ensure t
      ;   :config
      ;   (progn
      ;     (add-hook 'ejc-sql-minor-mode-hook
      ;               (lambda ()
      ;                 (auto-complete-mode t)
      ;                 (ejc-ac-setup)))

      ;     ))

#+end_src

* ivy
#+begin_src emacs-lisp

  (use-package ivy
    :ensure t
    :bind (("s-f" . swiper)
           ("s-F" . counsel-rg)
           :map ivy-minibuffer-map
           ("s-k" . ivy-previous-line)
           ("s-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           ("C-j" . ivy-next-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-j" . ivy-next-line))
    :diminish ivy-mode
    :init
    (setq ivy-fixed-height-minibuffer t)
    (setq ivy-height 24)
    :config
    (ivy-mode 1)
    ;;(set-face-attribute 'ivy-current-match nil :foreground "black" :background "dark cyan" :extend t)
    (set-face-attribute 'ivy-org nil :inherit 'default)
    :config
    (define-key global-map [remap describe-variable] 'counsel-describe-variable))

;  (use-package ivy-rich
;    :ensure t
;    :after counsel
;    :diminish ivy-rich-mode
;    :config
;    (ivy-rich-mode 1))

  (use-package counsel
    :ensure t
    :diminish counsel-mode
    :bind (
           ("s-b" . counsel-buffer-or-recentf)
           ("s-e" . counsel-switch-buffer)
           ;; ("s-e" . counsel-switch-buffer)
           ("M-x" . counsel-M-x))
    :config
    (counsel-mode 1))

#+end_src

* dired

#+begin_src emacs-lisp

  ;; Lists directories first
  (use-package dired
    :commands dired
    :config
    (setq dired-listing-switches
          "-laGh1v --group-directories-first"))


  ;; dired - try to guess copy path if there is another dired window open
  ;; for this to work you need to `brew install coreutils` which
  ;; installs gls, otherwise dired errors out stringp nil bla bla
  (setq dired-dwim-target t)
  (setq insert-directory-program (executable-find "gls"))

#+end_src

* fonts

To check current font
C-u C-x =

#+BEGIN_SRC emacs-lisp

  (setq my-font-size 140)
  ;;(setq my-font-name "Source Code Pro")
  (setq my-font-name "JetBrains Mono")
  ;;(setq my-font-name "Intel One Mono")
  ;;(setq my-font-name "Input")
  ;;(setq my-font-name "Iosevka Fixed")
  ;;(setq my-font-name "Consolas")
  ;;(setq my-font-name "Hack")
  ;;(setq my-font-name "M PLUS 1 Code")
  ;;(setq my-font-size 112)
  ;;(setq my-font-name "Source Code Pro")

  (dolist (face '(default fixed-pitch))
    (set-face-attribute face nil :font my-font-name :height my-font-size))

  ; (set-face-attribute 'default nil :background "gray95")

  ;; for ayu
  (set-face-attribute 'org-block nil :background "#141a24")

#+END_SRC

#+BEGIN_SRC emacs-lisp

  ;;; what-face to determine the face at the current point
  ;; https://gitlab.com/buildfunthings/emacs-config/blob/master/loader.org
  (defun my/what-face (pos)
    (interactive "d")
    (let ((face (or (get-char-property (point) 'read-face-name)
                    (get-char-property (point) 'face))))
      (if face (message "Face: %s" face) (message "No face at %d" pos))))


  (defun change-font-height (delta)
    ;(set-face-attribute 'default nil :height (+ (face-attribute 'default :height) delta))
    ;(set-face-attribute 'org-block nil :height (+ (face-attribute 'org-block :height) delta))

    (dolist (face '(default fixed-pitch))
        (set-face-attribute face nil :height (+ (face-attribute 'default :height) delta)))
  )

  (global-set-key (kbd "s-=") (lambda () (interactive) (change-font-height +10)))
  (global-set-key (kbd "s--") (lambda () (interactive) (change-font-height -10)))
  ;;  (global-set-key (kbd "s-0") '(lambda () (interactive) (set-face-attribute 'default nil :height 140)))

  ;(global-set-key (kbd "s-0") '(lambda () (interactive) (set-face-attribute 'default nil :height my-font-size)))
  (global-set-key (kbd "s-0") (lambda () (interactive) 
    (dolist (face '(default fixed-pitch))
    (set-face-attribute face nil :font my-font-name :height my-font-size))
    ;;(set-face-attribute face nil :height my-font-size))
  ))

#+END_SRC

* org fonts

- Used configuration from here:
https://zzamboni.org/post/beautifying-org-mode-in-emacs/
TODO: check this guy's org-doanload part for images
https://github.com/zzamboni/dot-emacs/blob/master/init.org

- Inter font is the default for Obsidian.
https://rsms.me/inter/download/
https://github.com/rsms/inter

- IM FELL ENGLISH font
https://iginomarini.com/fell/the-revival-fonts/

#+begin_src emacs-lisp

    (defun my/set-org-faces ()
      (interactive)
      ;;(set-face-attribute 'org-level-1 nil :height 1.0)
      ;;(set-face-attribute 'org-level-2 nil :height 1.0)
      ;;(set-face-attribute 'org-level-3 nil :height 1.0)
      ;;(set-face-attribute 'org-level-4 nil :height 1.0)
      ;;(set-face-attribute 'org-level-5 nil :height 1.0)
      ;;(set-face-attribute 'org-level-6 nil :height 1.0)
      ;;(set-face-attribute 'org-level-7 nil :height 1.0)
      ;;(set-face-attribute 'org-level-8 nil :height 1.0)


      (setq my-fixed-pitch-font-name my-font-name)
      (setq my-fixed-pitch-font-size my-font-size)

      (setq my-variable-pitch-font-name "Inter")
      (setq my-variable-pitch-font-size 190)

      ;;(set-face-attribute 'variable-pitch nil :family "ETBembo" :height 210 :weight 'normal)
      (set-face-attribute 'variable-pitch nil :family my-variable-pitch-font-name :height my-variable-pitch-font-size :weight 'normal)
      (set-face-attribute 'fixed-pitch nil :family my-fixed-pitch-font-name :height my-fixed-pitch-font-size :weight 'normal)

    (let* ((variable-tuple
            (cond
                  ((x-list-fonts "Inter")               '(:font "Inter"))
                  ((x-list-fonts "IM FELL English PRO") '(:font "IM FELL English PRO"))
                  ((x-list-fonts "Georgia")             '(:font "Georgia"))
                  ((x-list-fonts "ETBembo")             '(:font "ETBembo"))
                  ((x-list-fonts "Helvetica")           '(:font "Helvetica"))
                  ((x-list-fonts "Source Sans Pro")     '(:font "Source Sans Pro"))
                  ((x-list-fonts "Lucida Grande")       '(:font "Lucida Grande"))
                  ((x-list-fonts "Verdana")             '(:font "Verdana"))
                  ((x-family-fonts "Sans Serif")        '(:family "Sans Serif"))
                  (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
           (base-font-color     (face-foreground 'default nil 'default))
           (headline           `(:inherit default :weight bold :foreground ,base-font-color)))


      (custom-theme-set-faces
       'user
       `(org-level-8 ((t (,@headline ,@variable-tuple))))
       `(org-level-7 ((t (,@headline ,@variable-tuple))))
       `(org-level-6 ((t (,@headline ,@variable-tuple))))
       `(org-level-5 ((t (,@headline ,@variable-tuple))))
       `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
       `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.20))))
       `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.25))))
       `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.5))))
       `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))

    ;;(custom-theme-set-faces
    ;;   'user
    ;;   '(variable-pitch ((t (:family "IM FELL English PRO" :height 200 :weight regular))))
    ;;   '(fixed-pitch ((t ( :family "Source Code Pro" :height 140 :weight regular)))))



    (custom-theme-set-faces
     'user
     '(org-block ((t (:inherit fixed-pitch))))
     '(org-code ((t (:inherit (shadow fixed-pitch)))))
     '(org-document-info ((t (:foreground "dark orange"))))
     '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
     '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
     '(org-link ((t (:foreground "royal blue" :underline t))))
     '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
     '(org-property-value ((t (:inherit fixed-pitch))) t)
     '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
     '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
     '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
     '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))

    ;; for default white theme
    (set-face-attribute 'org-block nil :background "gray90")

    ;; for ujelly
    ;(set-face-attribute 'org-block nil :background "gray14")

    ;; chocolate
    ;; (set-face-attribute 'org-block nil :background "#4B393E")
      )

  ; (add-hook 'org-mode-hook 'variable-pitch-mode)
    ;;(add-hook 'org-mode-hook (lambda () (my/set-org-faces)))

   #+end_src
* paren mode (matching pares)

#+BEGIN_SRC emacs-lisp

  ; match parens
  (setq show-paren-delay 0)
  (show-paren-mode 1)
  ;;(set-face-background 'show-paren-match "#ff0000")
  ;(set-face-background 'show-paren-match "systemBlueColor")
  (set-face-background 'show-paren-match "DodgerBlue1")
  (set-face-foreground 'show-paren-match "#000000")

#+END_SRC

* keycast
#+begin_src emacs-lisp

  (use-package moody :ensure)

  (use-package keycast
    :ensure
    :after moody
    :config
    (setq keycast-window-predicate 'moody-window-active-p)
    (setq keycast-separator-width 1)
    (setq keycast-insert-after 'mode-line-buffer-identification)
    (setq keycast-remove-tail-elements nil)
    ;(keycast-mode 1)
    ;(set-face-attribute 'keycast-key nil :background "#000000")
    ;(set-face-attribute 'keycast-key nil :background "white" :height 1.0  :box '(:line-width -1 :color nil :style released-button))
    ;(keycast-key ((t (:background "gray58" :foreground "#000000" :weight bold :height 1))))
    ;;(set-face-attribute 'keycast-key nil :background "gray" :height 1.0 :box '(:width 0))
    ;;(set-face-attribute 'keycast-key nil :background "gray" :height 1.0 :box '(:line-width -1 :style released-button))
;;;;(set-face-attribute 'keycast-key nil :background "gray" :box '(:line-width -1 :style released-button))

  ;; TODO pending review
    (add-to-list 'keycast-substitute-alist '(mouse-event-p nil))
    (add-to-list 'keycast-substitute-alist '(mouse-movement-p nil))
    (add-to-list 'keycast-substitute-alist '(mwheel-scroll nil))
    ;; (add-to-list 'keycast-substitute-alist '(mouse-set-point nil))
    ;; (add-to-list 'keycast-substitute-alist '(mouse-set-region nil))
    ;; (add-to-list 'keycast-substitute-alist '(mouse-drag-secondary nil))
    ;; (add-to-list 'keycast-substitute-alist '(mouse-drag-line nil))
    ;; (add-to-list 'keycast-substitute-alist '(mouse-drag-drag nil))
    ;; (add-to-list 'keycast-substitute-alist '(mouse-start-end nil))
    ;; (add-to-list 'keycast-substitute-alist '(mouse-drag-region nil nil))
    ;; (add-to-list 'keycast-substitute-alist '(mouse-drag-track nil nil))
    ;; (add-to-list 'keycast-substitute-alist '(mouse-drag-region-rectangle nil))
    ;; (add-to-list 'keycast-substitute-alist '(mouse-drag-and-drop-region nil))
    ;; (add-to-list 'keycast-substitute-alist '(mwheel-event-button nil))
    ;; (add-to-list 'keycast-substitute-alist '(dframe-mouse-event-p nil))
    ;; (add-to-list 'keycast-substitute-alist '(mouse-drag-events-are-point-events-p nil))
    (add-to-list 'keycast-substitute-alist '(self-insert-command "." "Typingâ€¦"))
    (add-to-list 'keycast-substitute-alist '(org-self-insert-command "." "Typingâ€¦")))

#+end_src

* narrow-widen

http://endlessparentheses.com/the-toggle-map-and-wizardry.html

#+BEGIN_SRC emacs-lisp

  (define-prefix-command 'endless/toggle-map)
  ;; The manual recommends C-c for user keys, but C-x t is
  ;; always free, whereas C-c t is used by some modes.
  (define-key ctl-x-map "t" 'endless/toggle-map)
  (define-key endless/toggle-map "c" #'column-number-mode)
  (define-key endless/toggle-map "d" #'toggle-debug-on-error)
  (define-key endless/toggle-map "e" #'toggle-debug-on-error)
  (define-key endless/toggle-map "f" #'auto-fill-mode)
  (define-key endless/toggle-map "l" #'toggle-truncate-lines)
  (define-key endless/toggle-map "q" #'toggle-debug-on-quit)
  (define-key endless/toggle-map "t" #'endless/toggle-theme)
  (define-key endless/toggle-map "v" #'visual-line-mode)
  ;(global-set-key (kbd "C-x t v") 'visual-line-mode)

  ;;; Generalized version of `read-only-mode'.
  (define-key endless/toggle-map "r" #'dired-toggle-read-only)
  (autoload 'dired-toggle-read-only "dired" nil t)
  (define-key endless/toggle-map "w" #'whitespace-mode)

#+END_SRC

 http://endlessparentheses.com/emacs-narrow-or-widen-dwim.html

 #+BEGIN_SRC emacs-lisp

  (defun narrow-or-widen-dwim (p)
    "Widen if buffer is narrowed, narrow-dwim otherwise.
  Dwim means: region, org-src-block, org-subtree, or
  defun, whichever applies first. Narrowing to
  org-src-block actually calls `org-edit-src-code'.

  With prefix P, don't widen, just narrow even if buffer
  is already narrowed."
    (interactive "P")
    (declare (interactive-only))
    (cond ((and (buffer-narrowed-p) (not p)) (widen))
          ((region-active-p)
           (narrow-to-region (region-beginning)
                             (region-end)))
          ((derived-mode-p 'org-mode)
           ;; `org-edit-src-code' is not a real narrowing
           ;; command. Remove this first conditional if
           ;; you don't want it.
           (cond ((ignore-errors (org-edit-src-code) t)
                  (delete-other-windows))
                 ((ignore-errors (org-narrow-to-block) t))
                 (t (org-narrow-to-subtree))))
          ((derived-mode-p 'latex-mode)
           (LaTeX-narrow-to-environment))
          (t (narrow-to-defun))))

                                          ; cmd-n to narrow and widen
  (global-unset-key (kbd "s-n"))
  (global-set-key (kbd "s-n") 'narrow-or-widen-dwim)

  (define-key endless/toggle-map "n"
              #'narrow-or-widen-dwim)
  ;; This line actually replaces Emacs' entire narrowing
  ;; keymap, that's how much I like this command. Only
  ;; copy it if that's what you want.
  (define-key ctl-x-map "n" #'narrow-or-widen-dwim)
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (define-key LaTeX-mode-map "\C-xn"
                          nil)))

#+END_SRC

* kotlin
#+begin_src emacs-lisp

  (use-package kotlin-mode
    :ensure t
    :mode ("\\.kt?\\'" . kotlin-mode))

#+end_src
* lsp
#+begin_src emacs-lisp

;;(use-package lsp-mode
;;  :ensure t
;;  :hook (python-mode . lsp)
;;  :config
;;  (setq lsp-python-ms-python-executable-cmd "python3"))

#+end_src

* visual fill column

#+begin_src emacs-lisp

  (use-package visual-fill-column
    :ensure t)
  (add-hook 'visual-line-mode-hook #'visual-fill-column-mode)
  (add-hook 'org-mode-hook (lambda () (setq fill-column 160)))
  (add-hook 'org-mode-hook 'visual-line-mode)

  (setq-default visual-fill-column-center-text t)

#+end_src
* corfu
#+begin_src emacs-lisp

; (use-package corfu
;   :ensure t
;   ;; Optional customizations
;   :custom
;   ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
;   ;; (corfu-auto t)                 ;; Enable auto completion
;   (corfu-auto-delay 0.0)
;   ;; (corfu-separator ?\s)          ;; Orderless field separator
;   ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
;   ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
;   ;; (corfu-preview-current nil)    ;; Disable current candidate preview
;   ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
;   ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
;   ;; (corfu-scroll-margin 5)        ;; Use scroll margin

;   ;; Enable Corfu only for certain modes.
;   ;; :hook ((prog-mode . corfu-mode)
;   ;;        (shell-mode . corfu-mode)
;   ;;        (eshell-mode . corfu-mode))

;   :bind (:map corfu-map
;               ("s-j" . corfu-next)
;               ("s-k" . corfu-previous)
;          )
;   ;; Recommended: Enable Corfu globally.
;   ;; This is recommended since Dabbrev can be used globally (M-/).
;   ;; See also `corfu-excluded-modes'.
;   :init
;   (global-corfu-mode))

; ;; A few more useful configurations...
; (use-package emacs
;   :init
;   ;; TAB cycle if there are only few candidates
;   (setq completion-cycle-threshold 3)

;   ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
;   ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
;   ;; (setq read-extended-command-predicate
;   ;;       #'command-completion-default-include-p)

;   ;; Enable indentation+completion using the TAB key.
;   ;; `completion-at-point' is often bound to M-TAB.
;   (setq tab-always-indent 'complete))

#+end_src

* cape
#+begin_src emacs-lisp

; ;; Enable Corfu completion UI
; ;; See the Corfu README for more configuration tips.
; ;; Add extensions
; (use-package cape
;   :ensure t
;   ;; Bind dedicated completion commands
;   ;; Alternative prefix keys: C-c p, M-p, M-+, ...
;   :bind (("C-c p p" . completion-at-point) ;; capf
;          ("C-c p t" . complete-tag)        ;; etags
;          ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
;          ("C-c p h" . cape-history)
;          ("C-c p f" . cape-file)
;          ("C-c p k" . cape-keyword)
;          ("C-c p s" . cape-symbol)
;          ("C-c p a" . cape-abbrev)
;          ("C-c p i" . cape-ispell)
;          ("C-c p l" . cape-line)
;          ("C-c p w" . cape-dict)
;          ("C-c p \\" . cape-tex)
;          ("C-c p _" . cape-tex)
;          ("C-c p ^" . cape-tex)
;          ("C-c p &" . cape-sgml)
;          ("C-c p r" . cape-rfc1345))
;   :init
;   ;; Add `completion-at-point-functions', used by `completion-at-point'.
;   (add-to-list 'completion-at-point-functions #'cape-dabbrev)
;   (add-to-list 'completion-at-point-functions #'cape-file)
;   ;;(add-to-list 'completion-at-point-functions #'cape-history)
;   ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
;   ;;(add-to-list 'completion-at-point-functions #'cape-tex)
;   ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
;   ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
;   ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
;   ;;(add-to-list 'completion-at-point-functions #'cape-ispell)
;   ;;(add-to-list 'completion-at-point-functions #'cape-dict)
;   ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
;   ;;(add-to-list 'completion-at-point-functions #'cape-line)
; )

#+end_src
* orderless
#+begin_src emacs-lisp

; ;; Optionally use the `orderless' completion style.
; (use-package orderless
;   :ensure t
;   :init
;   ;; Configure a custom style dispatcher (see the Consult wiki)
;   ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
;   ;;       orderless-component-separator #'orderless-escapable-split-on-space)
;   (setq completion-styles '(orderless basic)
;         completion-category-defaults nil
;         completion-category-overrides '((file (styles . (partial-completion))))))

#+end_src
* Previous customizations

#+BEGIN_SRC emacs-lisp

  (setq custom-file (concat init-dir "custom.el"))
  (load custom-file :noerror)

#+END_SRC

