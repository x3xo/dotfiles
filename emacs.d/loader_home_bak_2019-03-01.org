#+TITLE: My GNU Emacs configuration
#+STARTUP: indent
#+OPTIONS: H:5 num:nil tags:nil toc:nil timestamps:t
#+LAYOUT: post
#+DESCRIPTION: Loading emacs configuration using org-babel
#+TAGS: emacs
#+CATEGORIES: editing

* Introduction

This is my version of an configuration file for GNU Emacs. I have been using GNU Emacs since 2000 when I was introduced to it by my mentor at Personify Inc. Sadly Personify Inc was victim to the dot com bust of 2001. I have been using GNU Emacs for everything since then though.

You can find the latest version of this configuration at
https://github.com/credmp/emacs-config or at https://gitlab.com/buildfunthings/emacs-config.

I modelled this set of files based off of the emacs-starter-kit at https://github.com/eschulte/emacs24-starter-kit.

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "niko")
  (setq user-mail-address "niko@local")
#+END_SRC

* my config top part
#+BEGIN_SRC emacs-lisp
      ;; Allow 20MB of memory (instead of 0.76MB) before calling garbage collection. This means GC runs less often, which speeds up some operations.
      (setq gc-cons-threshold 20000000)

        (setq inhibit-x-resources 1)

        ;; set the default mode for scratch buffer to text-mode. Default is elisp
        (setq initial-major-mode 'text-mode)

        (set-keyboard-coding-system nil)

          ;; use M-x toggle-frame-fullscreen
          (setq ns-use-native-fullscreen nil)

          (setq inhibit-x-resources 1)
            ;; open files in same emacs frame
            (setq ns-pop-up-frames nil)

            ;; https://www.emacswiki.org/emacs/HorizontalSplitting
            ;; open help etc in horizontal(vim horizontal) split
            (setq split-width-threshold 9999)

            ;; open help etc in horizontal(vim vertical) split
            ;; (setq split-width-threshold 0)

            ;; set fn key to hyper
            ;; http://ergoemacs.org/emacs/emacs_hyper_super_keys.html
            (setq ns-function-modifier 'hyper)

        ;;    (global-set-key (kbd "H-f") 'toggle-frame-fullsceen)

        ;; NOTES
        ;; global-set-key expects an interactive command. (lambda () (interactive) (forward-line 5)) ought to work.
        ;; By the way, C-h f commandp is a pretty good starting point for errors like that.
            (global-set-key (kbd "H-f") (lambda () (interactive)
                                            (toggle-frame-fullscreen)))


            ;; disable transient-mark-mode
            ;; (setq transient-mark-mode nil)

            ;; answer yes or no questions with just y and p
            (defalias 'yes-or-no-p 'y-or-n-p)

            ;; enable/disable blinking cursor
            (blink-cursor-mode 0)

            ;; vertical bar caret
            ;; (setq-default cursor-type 'bar)

            ;; match parens
            (show-paren-mode 1)

            ;; use spaces for tabs
            (setq-default indent-tabs-mode nil)
            (setq tab-width 4)

            ;; line spacing. Set to 1 for mononoki line height linespace
            ;;(setq-default line-spacing 0)

            ;; show column number
            (setq column-number-mode 1)

            ;; highlight current line
            (global-hl-line-mode 1)

            ;; set default session for tramp
            (setq tramp-defaul-session "ssh")

            ;; toggle line wrapping
            (global-set-key (kbd "<f6>") 'toggle-truncate-lines)

            ;; start a shell
            (global-set-key (kbd "<f5>") 'shell)
            (setq explicit-shell-file-name "/usr/local/bin/zsh")

            ;; (global-set-key (kbd "<f9>") (lambda() (interactive)(find-file "~/.emacs.d/init.el")))
            (global-set-key (kbd "<f9>") (lambda() (interactive)(find-file "~/.emacs.d/loader.org")))

            ;; make cmd-left and right move to beginning and end of line
            (global-set-key (kbd "s-<right>") 'move-end-of-line)
            (global-set-key (kbd "s-<left>") 'move-beginning-of-line)

            ;; since M-< and > are tricky
            (global-set-key (kbd "s-<") 'beginning-of-buffer)
            (global-set-key (kbd "s->") 'end-of-buffer)

            ;; commenting
            (global-set-key (kbd "s-/") 'comment-dwim)

            ;; kill buffer with cmd-w
            ;; (global-set-key (kbd "s-w") 'kill-this-buffer)

            ;; disable CMD-q for quitting by accident
            (global-unset-key (kbd "s-q"))

            ;; hide emacs instead of quit
            (global-set-key (kbd "s-q") 'ns-do-hide-emacs)
            ;; enable CMD-OPT-h to hide other apps like in other apps
            (global-set-key (kbd "M-s-Ë™") 'ns-do-hide-others)

            (global-unset-key (kbd "C-w"))
            (global-set-key (kbd "C-w k") 'kill-region)
            (global-set-key (kbd "C-w c") 'kill-ring-save)

            ;; toggle full screen
            (global-unset-key (kbd "<f10>"))
            (global-set-key (kbd "<f10>") 'toggle-frame-fullscreen)
            (global-set-key (kbd "C-s-f") 'toggle-frame-fullscreen)

#+END_SRC

* A secure Emacs environment

Great article why [[https://glyph.twistedmatrix.com/2015/11/editor-malware.html][Your editor is malware]]. The following basically sets up the configuration to adhere to the articles recommondations.

#+BEGIN_SRC shell :exports none
  python -m pip install --user certifi

# use this if the one above fails
# python3 -m pip install --user certifi
#+END_SRC

#+RESULTS:

#+BEGIN_SRC emacs-lisp
  ;;  (if (fboundp 'gnutls-available-p)
  ;;      (fmakunbound 'gnutls-available-p))

  (require 'cl)
  (setq tls-checktrust t)

  ;;(setq python (or (executable-find "py.exe")
  ;;                 (executable-find "python")
  ;;                 ))

  (setq python "/usr/local/bin/python3")
;;  (setq python "/usr/bin/python")

  (let ((trustfile
         (replace-regexp-in-string
          "\\\\" "/"
          (replace-regexp-in-string
           "\n" ""
           (shell-command-to-string (concat python " -m certifi"))))))
    (setq tls-program
          (list
           (format "gnutls-cli%s --x509cafile %s -p %%p %%h"
                   (if (eq window-system 'w32) ".exe" "") trustfile)))
    (setq gnutls-verify-error t)
    (setq gnutls-trustfiles (list trustfile)))

  ;; Test the settings by using the following code snippet:
  ;;  (let ((bad-hosts
  ;;         (loop for bad
  ;;               in `("https://wrong.host.badssl.com/"
  ;;                    "https://self-signed.badssl.com/")
  ;;               if (condition-case e
  ;;                      (url-retrieve
  ;;                       bad (lambda (retrieved) t))
  ;;                    (error nil))
  ;;               collect bad)))
  ;;    (if bad-hosts
  ;;        (error (format "tls misconfigured; retrieved %s ok" bad-hosts))
  ;;      (url-retrieve "https://badssl.com"
  ;;                    (lambda (retrieved) t))))
#+END_SRC

* Installing use-package
** Setup

GNU Emacs has a lot of packages that make things very easy for the
user. The package management infrastructure makes it a breeze to
install new packages and keep up-to-date with their development.

There are several package archives available for GNU Emacs:

- GNU
- Marmalade
- Melpa

Each archive will write its files in a seperate archive directory.

#+BEGIN_SRC emacs-lisp
  (require 'package)
#+END_SRC

Because the default setting for package-archives is to use the HTTP access to the GNU archive, I set the variable to `nil` before adding the HTTPS variants.

#+name: credmp-package-infrastructure
#+begin_src emacs-lisp

  (defvar gnu '("gnu" . "https://elpa.gnu.org/packages/"))
  (defvar melpa '("melpa" . "https://melpa.org/packages/"))
  (defvar melpa-stable '("melpa-stable" . "https://stable.melpa.org/packages/"))
  (defvar org '("org" . "http://orgmode.org/elpa/"))

  ;; Add marmalade to package repos
  (setq package-archives nil)
  (add-to-list 'package-archives org t)
  (add-to-list 'package-archives melpa-stable t)
  (add-to-list 'package-archives melpa t)
  (add-to-list 'package-archives gnu t)
#+end_src

Initialize the archive and refresh the contents in case there is no cached archive.

#+BEGIN_SRC emacs-lisp
  (package-initialize)

  (unless (and (file-exists-p (concat init-dir "elpa/archives/gnu"))
               (file-exists-p (concat init-dir "elpa/archives/melpa"))
               (file-exists-p (concat init-dir "elpa/archives/org")))
    (package-refresh-contents))
#+END_SRC

At each load the package list will be evaluated and any missing
packages will be installed. The packages-install function deals with
this check and takes care of any loading of the packages.

#+name: credmp-package-installer
#+begin_src emacs-lisp
  (defun packages-install (&rest packages)
    (message "running packages-install")
    (mapc (lambda (package)
            (let ((name (car package))
                  (repo (cdr package)))
              (when (not (package-installed-p name))
                (let ((package-archives (list repo)))
                  (package-initialize)
                  (package-install name)))))
          packages)
    (package-initialize)
    (delete-other-windows))
#+end_src

** The package

#+name: credmp-package-installer
#+begin_src emacs-lisp
  ;; Install extensions if they're missing
  (defun init--install-packages ()
    (message "Lets install some packages")
    (packages-install
     ;; Since use-package this is the only entry here
     ;; ALWAYS try to use use-package!
     (cons 'use-package melpa)
     ))

  (condition-case nil
      (init--install-packages)
    (error
     (package-refresh-contents)
     (init--install-packages)))
#+end_src
* diminish mode
#+BEGIN_SRC emacs-lisp
(use-package diminish
    :ensure t)
#+END_SRC
* redo

#+BEGIN_SRC emacs-lisp
  ;; redo
  (use-package undo-tree
    :ensure t
    :diminish undo-tree-mode
    :init
    (progn
      (global-set-key (kbd "s-Z") 'undo-tree-redo)
      ))
#+END_SRC

* which key

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :diminish which-key-mode
    :config
    (which-key-mode))
#+END_SRC

* window dimensions
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(width . 150))
  (add-to-list 'default-frame-alist '(height . 52))
#+END_SRC

* font settings

#+BEGIN_SRC emacs-lisp
  (setq my-font-size 120)
;;  (setq font-string "SourceC ode Pro-")
;;  (setq font-and-size (concat font-string my-font-size))
  ;; set font and dimensions
  ;;(add-to-list 'default-frame-alist '(font . "Inconsolata-g-14"))
  ;;(add-to-list 'default-frame-alist '(font . "Input-11"))
  ;;(add-to-list 'default-frame-alist '(font . "Menlo for Powerline-15"))
  ;;(add-to-list 'default-frame-alist '(font . "Consolas for BBEdit-15"))
  ;;(add-to-list 'default-frame-alist '(font . "Source Code Pro-14"))
  (add-to-list 'default-frame-alist '(font . "snpro-12"))
  ;;(add-to-list 'default-frame-alist '(font . "SF Mono-15"))
  ;;(add-to-list 'default-frame-alist '(font . "Fira Code-12"))
  ;;(add-to-list 'default-frame-alist '(font . "Anonymous Pro-12"))
  ;;(add-to-list 'default-frame-alist '(font . "PragmataPro"))
  ;;(add-to-list 'default-frame-alist '(font . "Iosevka-14"))
  ;;(add-to-list 'default-frame-alist '(font . "FuraMono Nerd Font Mono-12"))
  ;;(add-to-list 'default-frame-alist '(font . "Operator Mono-13"))
  ;;(add-to-list 'default-frame-alist '(font . "Office Code Pro-12"))
  ;;(add-to-list 'default-frame-alist '(font . "dejavu sans mono-12"))

  ;;(add-to-list 'default-frame-alist '(font . "Source Code Pro-14:demibold"))
  ;;(add-to-list 'default-frame-alist '(font . "Monaco-10"))
  ;;(add-to-list 'default-frame-alist '(font . "PT Mono-12"))
  ;;(add-to-list 'default-frame-alist '(font . "Menlo-12"))
  ;;(add-to-list 'default-frame-alist '(font . "CamingoCode-14"))
  ;;(add-to-list 'default-frame-alist '(font . "Consolas for BBEdit-15"))
  ;;(add-to-list 'default-frame-alist '(font . "Roboto Mono-12"))
  ;;(add-to-list 'default-frame-alist '(font . "Ubuntu Mono-14"))

#+END_SRC

# set a font while emacs is running
#+BEGIN_SRC emacs-lisp
  ;; set default font__
  ;;(set-face-attribute 'default nil :height 140 :font "Fira Mono")
  ;;(set-face-attribute 'default nil :height 120 :font "Menlo")
  ;;(set-face-attribute 'default nil :font "dejavu sans mono-12")
  ;;(set-face-attribute 'default nil :height 150 :font "Consolas for BBEdit")
  ;;(set-face-attribute 'default nil :height 140 :weight 'demibold :font "Source Code Pro")
  ;;(set-face-attribute 'default nil :height 120 :weight 'normal :font "Source Code Pro")
  ;;(set-face-attribute 'default nil :height 140 :weight 'demibold :font "Monaco")
  ;;(set-face-attribute 'default nil :height 130 :font "Iosenvka")
  ;;(set-face-attribute 'default nil :height 150 :font "mononoki")
  ;;(set-face-attribute 'default nil :height 140 :font "Inconsolata-g")
  ;;(set-face-attribute 'default nil :height 140 :font "Input-14")
#+END_SRC


#+BEGIN_SRC emacs-lisp
  ;;; what-face to determine the face at the current point
  ;; https://gitlab.com/buildfunthings/emacs-config/blob/master/loader.org
  (defun my/what-face (pos)
    (interactive "d")
    (let ((face (or (get-char-property (point) 'read-face-name)
                    (get-char-property (point) 'face))))
      (if face (message "Face: %s" face) (message "No face at %d" pos))))


  (defun change-font-height (delta)
    (set-face-attribute 'default nil :height (+ (face-attribute 'default :height) delta)))

  (global-set-key (kbd "s-=") '(lambda () (interactive) (change-font-height +10)))
  (global-set-key (kbd "s--") '(lambda () (interactive) (change-font-height -10)))
;;  (global-set-key (kbd "s-0") '(lambda () (interactive) (set-face-attribute 'default nil :height 140)))

  (global-set-key (kbd "s-0") '(lambda () (interactive) (set-face-attribute 'default nil :height my-font-size)))
#+END_SRC

* disable visial bell
#+BEGIN_SRC emacs-lisp

                                          ; disable visual bell and beeps.
                                          ;Visual bell is busy under El Capitan
                                          ;(setq visible-bell 1)

                                          ; this disables visual and audible bell
  (setq visible-bell nil)
  (setq ring-bell-function 'ignore)
#+END_SRC

* rest of config
#+BEGIN_SRC emacs-lisp

  (use-package try
    :ensure t)


  (use-package which-key
    :ensure t
    :config (which-key-mode))


  (add-to-list 'load-path "~/.emacs.d/my-themes/")

  ;;(require 'ob-typescript)
  (use-package ob-typescript
    :ensure t)

  (use-package org
    :mode (("\\.org$" . org-mode))
    :diminish org-indent-mode
    :ensure org-plus-contrib
    :config

    (org-babel-do-load-languages 'org-babel-load-languages
                                 '((shell      . t)
                                   (js         . t)
                                   (typescript . t)
                                   (emacs-lisp . t)
                                   (python     . t)
                                   (ruby       . t)
                                   (dot        . t)
                                   (css        . t)))


    ;;(org-babel-do-load-languages 'org-babel-load-languages
    ;;                            '((shell      . t)
    ;;                              (js         . t)
    ;;                              (emacs-lisp . t)
    ;;                              (python     . t)
    ;;                              (ruby       . t)
    ;;                              (dot        . t)
    ;;                              (css        . t)))
    )


  (setq org-confirm-babel-evaluate nil)
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-log-done t)

  (setq org-todo-keyword-faces
        '(;;("TODO" . org-warning)
          ("ON_IT" . (:foreground "DeepSkyBlue1" :weight bold))
          ("READY_FOR_RELEASE" . (:foreground "VioletRed2" :weight bold))
          ("WAIT" . (:foreground "red1" :weight bold))
          ("READY_FOR_MERGE" . (:foreground "LightGreen" :weight bold))
          ("NEEDS_INPUT" . (:foreground "SeaGreen1" :weight bold))
  ))


  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)


  (use-package ido
    :ensure ido-vertical-mode
    :init
    (progn
      (ido-mode 1)
      (setq ido-enable-flex-matching t)
      (ido-vertical-mode 1)
      ;;(setq ido-vertical-define-keys 'C-n-and-C-p-only)
      (setq ido-vertical-define-keys 'C-n-C-p-up-and-down)
      ;;(setq ido-vertical-show-count t)
      )
    )

  (use-package flx-ido
    :ensure t
    :init
    (progn
      (flx-ido-mode 1)
      (setq ido-use-faces nil)
      ))

  (use-package helm
    :ensure t
    :diminish helm-mode
    :init
    (progn
      (require 'helm-config)
      (helm-mode 1)
      (define-key global-map [remap find-file] 'helm-find-files)
      (define-key global-map [remap occur] 'helm-occur)
      (define-key global-map [remap list-buffers] 'helm-buffers-list)
      (define-key global-map [remap dabbrev-expand] 'helm-dabbrev)
      (global-set-key (kbd "M-x") 'helm-M-x)
      (unless (boundp 'completion-in-region-function)
        (define-key lisp-interaction-mode-map [remap completion-at-point] 'helm-lisp-completion-at-point)
        (define-key emacs-lisp-mode-map       [remap completion-at-point] 'helm-lisp-completion-at-point))
      (setq helm-mode-fuzzy-match t)
      (setq helm-completion-in-region-fuzzy-match t)
      (setq helm-recentf-fuzzy-match t)
      (setq helm-buffers-fuzzy-matching t)
      (setq helm-recentf-fuzzy-match t)
      (setq helm-buffers-fuzzy-matching t)
      ;;xx helm-find-files: fuzzy matching enabled by default.
      (setq helm-locate-fuzzy-match t)
      (setq helm-M-x-fuzzy-match t)
      (setq helm-semantic-fuzzy-match t)
      (setq helm-imenu-fuzzy-match t)
      (setq helm-apropos-fuzzy-match t)
      (setq helm-lisp-fuzzy-completion t)
      ;; show recent files
      ;;(global-set-key (kbd "s-r") 'helm-mini)
      (global-set-key (kbd "s-t") 'helm-mini)
      ;;    (global-set-key (kbd "s-e") 'helm-mini)
      (global-set-key (kbd "C-;") 'helm-mini)
      (global-set-key (kbd "s-e") 'helm-mini)
      ;;(global-set-key (kbd "s-o") 'helm-mini)
      ))


  (use-package use-package-chords
    :ensure t)

  (global-unset-key (kbd "C-\\"))
  (use-package avy
    :ensure t
    ;;    :bind ("s-o" . avy-goto-word-1)
    :bind ("C-\\" . avy-goto-word-1)
    :chords (("vn" . avy-goto-word-1))
    )

  (use-package evil
    :ensure t
    :config
    (evil-mode 1)
    )

  ;; enable % to jump to matching <div> tags etc
  (use-package evil-matchit
    :ensure t
    :config
    (global-evil-matchit-mode 1)
  )

  (use-package evil-leader
    :ensure t
    :config
    (global-evil-leader-mode)
    (evil-leader/set-leader ",")
    (evil-leader/set-key
        "e" 'find-file
        "b" 'switch-to-buffer
        "f" 'helm-mini
        "x" 'helm-M-x
        "s" 'save-buffer
        "t" 'org-todo
        ;;"q" 'ns-do-hide-emacs
        "q" 'kill-current-buffer
    )
  )

  (use-package web-mode
    :ensure t
    :init
    (progn
      (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
      ))

  ;; key-chord
  (use-package key-chord
    :ensure t
    :init
    (progn
      (key-chord-mode t)
      ))

  ;; (key-chord-define-global "zz" 'avy-goto-word-1)

  ;; magnars
  (use-package multiple-cursors
    :ensure t
    :init
    (progn
      (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
      (global-set-key (kbd "C->") 'mc/mark-next-like-this)
      (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
      (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
      ))

  ;; magnars
  (use-package expand-region
    :ensure t
    :init
    (progn
      (global-set-key (kbd "C-=") 'er/expand-region)
      ))


  (use-package exec-path-from-shell
    :ensure t
    :init
    (progn
      (exec-path-from-shell-initialize)
      ))

  ;;    (use-package perspective
  ;;      :ensure t)


  (use-package ggtags
    :ensure t)

  (use-package projectile
    :ensure t
    :diminish projectile-mode
    :init
    (progn
      (projectile-global-mode t)
      (add-to-list 'projectile-other-file-alist '("html" "ts"))
      (add-to-list 'projectile-other-file-alist '("ts" "html"))
      ;;        (global-set-key (kbd "C-'") (kbd "C-u C-c p a"))
      ;;(global-set-key (kbd "s-o") (kbd "C-u C-c p a"))
      (global-set-key (kbd "s-o") 'ng2-open-counterpart)

      ;;(global-set-key (kbd "s-e") 'projectile-recentf)
      (global-set-key (kbd "s-O") 'projectile-find-file)
      (global-set-key (kbd "s-F") 'projectile-ag)
      ;; (global-set-key (kbd "s-<up>") 'projectile-find-file-in-directory)
      (global-set-key (kbd "s-<up>") 'ido-find-file)))

  (use-package helm-projectile
    :ensure t
    :init
    (progn
      (helm-projectile-on)

      (global-set-key (kbd "C-.") (lambda () (interactive)
                                    (helm-projectile)
                                    (message "Opened:  %s" (buffer-name))))
      ))

  (use-package persp-mode
    :ensure t)


  ;;(use-package persp-projectile
  ;;:ensure t)



  (use-package ag
    :ensure t
    )

  ;;    (use-package helm-swoop
  ;;      :ensure t
  ;;      )
  ;;
  ;;    (use-package helm-ag
  ;;      :ensure t
  ;;      )

  (use-package restclient
    :ensure t
    )

  ;; Lists directories first
  (use-package dired
    :commands dired
    :init
    (setq dired-listing-switches
          "-laGh1v --group-directories-first"))


  ;; dired - try to guess copy path if there is another dired window open
  ;; for this to work you need to `brew install coreutils` which
  ;; installs gls, otherwise dired errors out stringp nil bla bla
  (setq dired-dwim-target t)
  (setq insert-directory-program (executable-find "gls"))




  ;;  (use-package typescript-mode
  ;;    :ensure t
  ;;    )

  ;; (use-package tss
  ;;     :ensure t
  ;;     )

  (use-package typescript-mode
    :mode
    (("\\.ts$" . typescript-mode)
     ("\\.tsx$" . typescript-mode))
    :interpreter ("node" . typescript-mode))

  (use-package ng2-mode
    :ensure t)

  ;; disable cmd-p cuz if crashes emacs
  (global-set-key (kbd "s-p") nil)
  (global-set-key (kbd "s-p") 'evil-mode)

  (global-set-key (kbd "M-s-âˆš") 'evil-mode)

  (define-key evil-normal-state-map " " 'evil-ex)

  ;; this is C and " aka CTRL SHIFT '
  (global-set-key (kbd "C-\"") 'evil-mode)
  (global-set-key (kbd "s-;") 'mode-line-other-buffer)

  (global-set-key (kbd "s-1") 'delete-other-windows)
  (global-set-key (kbd "s-2") 'split-window-below)
  (global-set-key (kbd "s-3") 'split-window-right)

  (global-set-key (kbd "C-x k") 'kill-this-buffer)

  ;;(global-set-key (kbd "s-0") 'delete-window)
  ;;(global-set-key (kbd "C-j") 'other-window)
  ;;(global-set-key (kbd "C-o") 'other-window)

  ;; switch between previous and next buffer using CMD , and .
  ;;(global-set-key (kbd "s-.") 'next-buffer)
  ;;(global-set-key (kbd "s-,") 'previous-buffer)

  ;; uncomment these to use Mac OS Command as Meta
  ;; (setq mac-command-modifier 'meta)
  ;; (setq mac-option-modifier 'super)
  ;; (setq ns-function-modifier 'hyper)

  ;; map right command key to meta. enais. commented out for use with kinesis keyboard
  ;; (setq mac-right-command-modifier 'meta)

  ;; save custom faces
  ;; (custom-set-faces
  ;;  ;; custom-set-faces was added by Custom.
  ;;  ;; If you edit it by hand, you could mess it up, so be careful.
  ;;  ;; Your init file should contain only one such instance.
  ;;  ;; If there is more than one, they won't work right.
  ;;  '(default ((t (:inherit nil :background "#282c34"))))
  ;;  '(cursor ((t (:background "IndianRed1"))))
  ;;  '(fringe ((t (:background "#282c34"))))
  ;;  '(helm-match ((t (:background "#282c34" :foreground "#dd0093"))))
  ;;  '(helm-source-header ((t (:background "#282c34" :foreground "#fad07a"))))
  ;;  '(hl-line ((t (:background "#2C323B"))))
  ;;  '(mode-line ((t (:background "#005F87" :foreground "White"))))
  ;;  '(region ((t (:background "alternateSelectedControlColor" :foreground "White")))))

#+END_SRC
* color theme

#+BEGIN_SRC emacs-lisp
(setq custom-safe-themes t)
#+END_SRC

#+BEGIN_SRC emacs-lisp

                                ;; (use-package eclipse-theme
                                ;;   :ensure t
                                ;;   :init
                                ;;   (progn
                                ;;     (load-theme 'eclipse)
                                ;;     (set-face-attribute 'cursor nil :background "IndianRed1")
                                ;;     (set-face-attribute 'region nil :background "#2F65CA" :foreground "White")
                                ;;     (set-face-attribute 'mode-line nil :background "#005F87" :foreground "White")
                                ;;     ))



                                ;; (use-package spacemacs-theme
                                ;;   :ensure t
                                ;;   :init
                                ;;   (progn
                                ;;     (load-theme 'spacemacs-dark)
                                ;;     ))

                                ;; (use-package atom-one-dark-theme
                                ;;   :ensure t
                                ;;   :init
                                ;;   (progn
                                ;;     (load-theme 'atom-one-dark)
                                ;;     (set-face-attribute 'cursor nil :background "IndianRed1")
                                ;;     ))

                ;;  (use-package autumn-light-theme
                ;;    :ensure t
                ;;    :init
                ;;    (progn
                ;;      (load-theme 'autumn-light t)
                ;;     ))

                ;; that's my usual theme


          ;; jbeans start
              (use-package jbeans-theme
                  :ensure t
                  :init
                  (progn
                  (load-theme 'jbeans)
                      ;;(setq my-background-color "#282c34")

                     ;; (setq my-background-color "#1D2021")
                     ;; (setq my-foreground-color "dark gray")


                     (setq my-background-color "#212734")
                     (setq my-foreground-color "dark gray")
                      ;;(set-face-attribute 'default nil :inherit nil :background my-background-color)

                      ;;set background and foreground
                      (set-face-attribute 'default nil :inherit nil :background my-background-color :foreground my-foreground-color)
                      (set-face-attribute 'fringe nil :background my-background-color)
                      ;;(set-face-attribute 'helm-source-header nil :background my-background-color :foreground "#fad07a")

                      (set-face-attribute 'cursor nil :background "IndianRed1")


                     ;; (set-face-attribute 'hl-line nil :background "gray18")
                   ;;(set-face-attribute 'hl-line nil :background "#1D232E")
                   (set-face-attribute 'hl-line nil :background "#293141")

                      ;; set to default setting
                      ;;(set-face-attribute 'mode-line nil :background "grey75" :foreground "black" :box '(:line-width -1 :style released-button))

                      ;; change default setting
                      ;;(set-face-attribute 'mode-line nil :background "#222535" :foreground "dark cyan")
                      ;;(set-face-attribute 'mode-line nil :background "#2b2b2b" :foreground "dark cyan" :box '(:line-width -1 :style released-button))
                      ;;(set-face-attribute 'mode-line nil :background "#2b2b2b" :foreground "#a09f93" :box '(:line-width -1 :style released-button))
                      (set-face-attribute 'mode-line nil :background "#222535" :foreground "#a09f93" :box '(:line-width -1 :style released-button))

                      ;;(set-face-attribute 'mode-line-buffer-id nil :foreground "#99cc99")
                      (set-face-attribute 'mode-line-buffer-id nil :foreground "dark cyan")

                      ;;(set-face-attribute 'region nil :background "#2F65CA" :foreground "White")
                      (set-face-attribute 'region nil :background "#656F9F" :foreground "White")
                      ;;(set-face-attribute 'mode-line nil :background "grey75" :foreground "black")

                      ;; helm matching words highlight
                      (set-face-attribute 'helm-match nil :background "#151515" :foreground "IndianRed3")

                      ;; current selected line in helm
                      ;;(set-face-attribute 'helm-selection nil :background "MediumPurple4")
                      (set-face-attribute 'helm-selection nil :background "dark blue")

                      ;; comment color
                      (set-face-attribute 'font-lock-comment-face nil :foreground "HotPink4")

                      ;; search
                      (set-face-attribute 'isearch nil :background "IndianRed3" :foreground "#cccccc")
                      (set-face-attribute 'isearch-fail nil :background "IndianRed3")
                      (set-face-attribute 'lazy-highlight nil :background "IndianRed3" :foreground "black")
                      (set-face-attribute 'highlight nil :background "#F99157" :foreground "black")
                  ))
            ;; jbeans end


         ;; base16 start
  ;;          (use-package base16-theme
  ;;              :ensure t
  ;;              :init
  ;;              (progn
  ;;                  ;;(load-theme 'base16-dracula)
  ;;
  ;;                      (load-theme 'base16-darktooth)
  ;;                      (set-face-attribute 'fringe nil :background "#1d2021")
  ;;                      (set-face-attribute 'org-link nil :foreground "IndianRed3")
  ;;                      (set-face-attribute 'mode-line nil :background "#222535" :foreground "dark gray")
  ;;
  ;;                      ;;(load-theme 'base16-eighties)
  ;;                      ;;(set-face-attribute 'fringe nil :background "#2d2d2d")
  ;;                      ;;(set-face-attribute 'org-link nil :foreground "IndianRed3")
  ;;                      ;;(set-face-attribute 'mode-line nil :background "#222535" :foreground "dark gray")
  ;;
  ;;                    ;; set to default setting
  ;;                    (set-face-attribute 'mode-line nil :background "grey75" :foreground "black" :box '(:line-width -1 :style released-button))
  ;;                    (set-face-attribute 'mode-line-buffer-id nil :foreground "IndianRed4")
  ;;                    ;;(set-face-attribute 'mode-line-buffer-id nil :foreground "IndianRed3")
  ;;
  ;;
  ;;                      ;(load-theme 'base16-atelier-cave)
  ;;                      ;(set-face-attribute 'org-link nil :foreground "IndianRed3")
  ;;                      ;(set-face-attribute 'mode-line nil :background "#222535" :foreground "dark gray")
  ;;                      ;(set-face-attribute 'fringe nil :background "#222535")
  ;;
  ;;              ;;(load-theme 'base16-gruvbox-light-medium)
  ;;              ;;(load-theme 'base16-oceanicnext)
  ;;                  ;;(load-theme 'base16-atelier-cave-light)
  ;;              ))
  ;;      ;; base16 end

    ;;  (use-package dracula-theme
    ;;    :ensure t
    ;;    :init
    ;;    (progn
    ;;      (load-theme 'dracula)
    ;;      )
    ;;    )



                       ;; notheme use this when not using any theme; default theme
                       ;;(set-face-attribute 'region nil :background "#2F65CA" :foreground "White")
              ;;;         (set-face-attribute 'hl-line nil :background "gray92")
              ;;;         (set-face-attribute 'fringe nil :background "White")
              ;;;         (set-face-attribute 'cursor nil :background "IndianRed1")


                ;; change mode-line color by evil state
                   (lexical-let ((default-color (cons (face-background 'mode-line)
                                                      (face-foreground 'mode-line))))
                     (add-hook 'post-command-hook
                       (lambda ()
                         (let ((color (cond ((minibufferp) default-color)
                                            ((evil-insert-state-p) '("#222535" . "IndianRed3"))
                                            ((evil-emacs-state-p)  '("#222535" . "#444488"))
                                            ;; ((buffer-modified-p)   '("#222535" . "#006fa0"))
                                            ((buffer-modified-p)   '("#222535" . "#F99B14"))
                                            (t default-color))))
                           (set-face-background 'mode-line (car color))
                           (set-face-foreground 'mode-line (cdr color))))))


                        ;;  (use-package ujelly-theme
                        ;;    :ensure t
                        ;;    :init
                        ;;    (progn
                        ;;      (load-theme 'ujelly)
                        ;;      ))


                            ;;  (load-theme 'light-blue)

                              ;;(use-package blackboard-theme
                              ;;  :ensure t
                              ;;  :init
                              ;;  (progn
                              ;;    (load-theme 'blackboard)
                              ;;    ))

                                ;;(load-theme 'adwaita)
                                ;;(set-face-attribute 'font-lock-builtin-face nil :foreground "dark blue")
                                ;;(set-face-attribute 'hl-line nil :background "gray87")

                                ;; (use-package color-theme-sanityinc-solarized
                                ;;   :ensure t
                                ;;   :init
                                ;;   (progn
                                ;;     (load-theme 'sanityinc-solarized-dark)
                                ;;     (set-face-attribute 'mode-line nil :box nil :background "gray6")
                                ;;     (set-face-attribute 'mode-line-inactive nil :box nil)
                                ;;     (set-face-attribute 'cursor nil :background "IndianRed1")
                                ;;     )
                                ;;   )



                                ;; (use-package jbeans-theme
                                ;;   :ensure t
                                ;;   :config
                                ;;   (progn
                                ;;     ;; config here
                                ;;     ;;    (require 'jbeans-theme)
                                ;;     ))


                                ;; don't use this
                                ;;(use-package ujelly-theme
                                ;;  :ensure t
                                ;;  :config
                                ;;  (progn
                                ;;    (require' ujelly-theme)
                                ;;    ))

                                ;; (use-package arjen-grey-theme
                                ;;   :ensure t
                                ;;   :config
                                ;;   (progn
                                ;;     (require 'arjen-grey-theme)
                                ;;     )
                                ;;   )

                                ;; (use-package material-theme
                                ;;   :ensure t
                                ;;   )

#+END_SRC

* mouse config
#+BEGIN_SRC emacs-lisp
  ;; scroll one line at a time (less "jumpy" than defaults)
  ;; https://www.emacswiki.org/emacs/SmoothScrolling

;;  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-scroll-amount '(2 ((shift) . 1))) ;; one line at a time

  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling

  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse

  (setq scroll-step 1) ;; keyboard scroll one line at a time
#+END_SRC

* Previous customizations

#+BEGIN_SRC emacs-lisp
  (setq custom-file (concat init-dir "custom.el"))

  (load custom-file :noerror)
#+END_SRC

* tern
#+BEGIN_SRC emacs-lisp
  (use-package tern
    :ensure t)

;;;;;  (use-package auto-complete
;;;;;    :ensure t
;;;;;    :init
;;;;;    (progn
;;;;;      (require 'auto-complete-config)
;;;;;      (ac-config-default)
;;;;;      ))
;;;;;
;;;;;  (use-package tern-auto-complete
;;;;;    :ensure t)
;;;;;
;;;;;  (add-hook 'js-mode-hook (lambda () (tern-mode t)))
;;;;;  (eval-after-load 'tern
;;;;;    '(progn
;;;;;       (require 'tern-auto-complete)
;;;;;       (tern-ac-setup)))
#+END_SRC
* js2
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :mode (("\\.js\\'" . js2-mode)))
#+END_SRC
* narrow-widen
# http://endlessparentheses.com/the-toggle-map-and-wizardry.html
#+BEGIN_SRC emacs-lisp
(define-prefix-command 'endless/toggle-map)
;; The manual recommends C-c for user keys, but C-x t is
;; always free, whereas C-c t is used by some modes.
(define-key ctl-x-map "t" 'endless/toggle-map)
(define-key endless/toggle-map "c" #'column-number-mode)
(define-key endless/toggle-map "d" #'toggle-debug-on-error)
(define-key endless/toggle-map "e" #'toggle-debug-on-error)
(define-key endless/toggle-map "f" #'auto-fill-mode)
(define-key endless/toggle-map "l" #'toggle-truncate-lines)
(define-key endless/toggle-map "q" #'toggle-debug-on-quit)
(define-key endless/toggle-map "t" #'endless/toggle-theme)
;;; Generalized version of `read-only-mode'.
(define-key endless/toggle-map "r" #'dired-toggle-read-only)
(autoload 'dired-toggle-read-only "dired" nil t)
(define-key endless/toggle-map "w" #'whitespace-mode)
#+END_SRC

# http://endlessparentheses.com/emacs-narrow-or-widen-dwim.html
#+BEGIN_SRC emacs-lisp
  (defun narrow-or-widen-dwim (p)
    "Widen if buffer is narrowed, narrow-dwim otherwise.
  Dwim means: region, org-src-block, org-subtree, or
  defun, whichever applies first. Narrowing to
  org-src-block actually calls `org-edit-src-code'.

  With prefix P, don't widen, just narrow even if buffer
  is already narrowed."
    (interactive "P")
    (declare (interactive-only))
    (cond ((and (buffer-narrowed-p) (not p)) (widen))
          ((region-active-p)
           (narrow-to-region (region-beginning)
                             (region-end)))
          ((derived-mode-p 'org-mode)
           ;; `org-edit-src-code' is not a real narrowing
           ;; command. Remove this first conditional if
           ;; you don't want it.
           (cond ((ignore-errors (org-edit-src-code) t)
                  (delete-other-windows))
                 ((ignore-errors (org-narrow-to-block) t))
                 (t (org-narrow-to-subtree))))
          ((derived-mode-p 'latex-mode)
           (LaTeX-narrow-to-environment))
          (t (narrow-to-defun))))

  ;;(global-set-key (kbd "s-n") 'narrow-or-widen-dwim)

  (define-key endless/toggle-map "n"
    #'narrow-or-widen-dwim)
  ;; This line actually replaces Emacs' entire narrowing
  ;; keymap, that's how much I like this command. Only
  ;; copy it if that's what you want.
  (define-key ctl-x-map "n" #'narrow-or-widen-dwim)
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (define-key LaTeX-mode-map "\C-xn"
                nil)))

#+END_SRC
* aggressive-indent (off)
#+BEGIN_SRC emacs-lisp
;;  (use-package aggressive-indent
;;    :ensure t
;;    :config
;;    (global-aggressive-indent-mode 1)
;;    )
#+END_SRC
* fly check, tide, company mode

#+BEGIN_SRC emacs-lisp

      (use-package tide
        :ensure t)

      (use-package company
        :config (add-hook 'prog-mode-hook 'company-mode))

      (use-package company-flx
        :ensure t
        :config (add-hook 'prog-mode-hook 'company-mode))

      ;;(company-flx-mode +1)


      ;; youcomplete me set
      ;; (use-package company-ycmd
      ;;   :ensure t)
      ;;
      ;;
      ;; (require 'company-ycmd)
      ;; (company-ycmd-setup)
      ;; (set-variable 'ycmd-server-command '("python" "/Users/niko/vimconfigs/vim/bundle/YouCompleteMe/python/ycm/youcompleteme.py"))
      ;; ;;(require 'ycmd-test)
      ;; ;;(ert-run-tests-interactively "ycmd-test")



  ;;;;


      (with-eval-after-load 'company
        (add-hook 'company-mode-hook (lambda ()
                                       (add-to-list 'company-backends 'company-capf)))
        (company-flx-mode +1))



      (defun setup-tide-mode ()
        (interactive)
        (tide-setup)
        (flycheck-mode +1)
        (setq flycheck-check-syntax-automatically '(save mode-enabled))
        (eldoc-mode +1)
        (diminish 'eldoc-mode)
        (tide-hl-identifier-mode +1)
        ;; company is an optional dependency. You have to
        ;; install it separately via package-install
        ;; `M-x package-install [ret] company`

        ;; (company-mode +1)
        ;; (auto-complete-mode 1)

    )

      ;; aligns annotation to the right hand side
      (setq company-tooltip-align-annotations t)

      ;; formats the buffer before saving (dangeours)
      ;;(add-hook 'before-save-hook 'tide-format-before-save)

      (add-hook 'typescript-mode-hook #'setup-tide-mode)

      ;; format options
      (setq tide-format-options '(:insertSpaceAfterFunctionKeywordForAnonymousFunctions t :placeOpenBraceOnNewLineForFunctions nil))


      (use-package flycheck
        :ensure t)
 #+END_SRC

* backup files
#+BEGIN_SRC emacs-lisp
(setq
   backup-by-copying t      ; don't clobber symlinks
   backup-directory-alist
    '(("." . "~/.emacs.d/backup"))    ; don't litter my fs tree
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t)       ; use versioned backups

#+END_SRC
* yasnippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :diminish yas-minor-mode
    :init
    (yas-global-mode 1))
#+END_SRC

* swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t)
#+END_SRC
* wrap-region
#+BEGIN_SRC emacs-lisp
  (use-package wrap-region
    :ensure t
    :diminish wrap-region-mode
    :config
    (wrap-region-global-mode 1))
#+END_SRC
* fasd
#+BEGIN_SRC emacs-lisp
(use-package fasd
  :ensure t
  )
#+END_SRC

* lua-mode

#+BEGIN_SRC emacs-lisp
  (use-package lua-mode
    :ensure t
  )
#+END_SRC
* test
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark))
#+END_SRC
